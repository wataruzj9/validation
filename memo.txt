		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.1.3.Final</version>
		</dependency>
  
		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>javax.el-api</artifactId>
			<version>2.2.4</version>
		</dependency>

		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.1.0.Final</version>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>javax.el</artifactId>
			<version>2.2.4</version>
		</dependency>



package jp.co.softbank.salesscm.common.validation.anotation;

import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
import static java.lang.annotation.ElementType.CONSTRUCTOR;
import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.ElementType.PARAMETER;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.validation.Constraint;
import javax.validation.Payload;
import javax.validation.constraints.Max;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
@NotNull(message = "{myKeys.NotNull}") // 独自メッセージ定義
@Size(max=10)
public @interface NotNullAndSize10 {
    String message() default "{org.yamkazu.jsr303_samples.customvalidator.UserId.message}";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        NotNullAndSize10[] value();
    }
}


package jp.co.softbank.salesscm.common.validation.anotation;

import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
import static java.lang.annotation.ElementType.CONSTRUCTOR;
import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.ElementType.PARAMETER;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.validation.Constraint;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import javax.validation.Payload;

import jp.co.softbank.salesscm.common.validation.anotation.UserId.UserIdValidator;

@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = { UserIdValidator.class })
public @interface UserId {
	Class<?>[] groups() default {};

	String message() default "{custum.validation.message.userid}";

	Class<? extends Payload>[] payload() default {};

	@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
	@Retention(RUNTIME)
	@Documented
	@interface List {
		UserId[] value();
	}

	class UserIdValidator implements ConstraintValidator<UserId, String> {

		@Override
		public void initialize(UserId userId) {
		}

		@Override
		public boolean isValid(String id, ConstraintValidatorContext context) {
			if (id != null && id.startsWith("A")) {
				return true;
			}
			return false;
		}
	}
}


        MaxAndMin bean = new MaxAndMin();
        bean.setStringValue("ストリング文字列です。"); 
        bean.setIntValue(-9); // -10より大きいからOK
        bean.setBigDecimalValue(new BigDecimal("3.5")); // 範囲内だからOK

        Set<ConstraintViolation<MaxAndMin>> violations = SCMValidator.validate(bean);

		if(violations.size() > 0){
			for (ConstraintViolation<MaxAndMin> violation : violations) {
				System.out.println(violation.getMessage()); //多言語化した後の実メッセージ
//				System.out.println(violation.geltMessageTemplate()); // メッセージのキー（プロパティファイルに当てるときの値）
//				System.out.println(violation.getInvalidValue()); // 実際に、画面でユーザが入れた都下の値
//				System.out.println(violation.getPropertyPath()); // DTOとかのjavaのフィールド名
			}
		}
        assertThat(SCMValidator.validate(bean).size(), is(1));




package jp.co.softbank.salesscm;

import javax.validation.constraints.Size;


public class HogeBean {
    @Size(max=10)
    String stringValue;
    
    public String getStringValue() {
		return stringValue;
	}
	public void setStringValue(String stringValue) {
		this.stringValue = stringValue;
	}
}



@IsNumber	プロパティ (文字列)	数値のみであるかどうかをチェックします。0～9以外の文字列が使用されている場合にエラー。	custum.validation.IsNumber.message	半角数字のみで入力して下さい。
@IsZenkaku	プロパティ (文字列)	全角のみであるかどうかをチェックします。全角以外の文字列が使用されている場合にエラー。	custum.validation.IsZenkaku.message	全角のみで入力して下さい。
@IsZenkakuKana	プロパティ (文字列)	全角カナのみであるかどうかをチェックします。全角カナ以外の文字列が使用されている場合にエラー。	custum.validation.IsZenkakuKana.message	全角カタカナのみで入力して下さい。
@IsHankaku	プロパティ (文字列)	半角のみであるかどうかをチェックします。半角以外の文字列が使用されている場合にエラー。	custum.validation.IsHankaku.message	半角のみで入力して下さい。
@IsHankakuEisu	プロパティ (文字列)	半角英数のみであるかどうかをチェックします。半角英数以外の文字列が使用されている場合にエラー。	custum.validation.IsHankakuEisu.message	半角英数のみで入力して下さい。
@IsHankakuEisuKigo	プロパティ (文字列)	半角英数記号のみであるかどうかをチェックします。半角英数記号以外の文字列が使用されている場合にエラー。	custum.validation.IsHankakuEisuKigo.message	半角英文字数字記号のみ入力して下さい。
@IsDate	プロパティ (文字列)	日付であるかどうかをチェックします。日付が妥当でない場合にエラー。	custum.validation.IsDate.message	正しい日付で入力して下さい。
@IsTelAll	プロパティ (文字列)	電話番号(全般)であるかどうかをチェックします。電話番号(全般)の形式に当てはまらない場合にエラー。	custum.validation.IsTelAll.message	電話番号が不正です。
@IsTelNumber	プロパティ (文字列)	固定電話番号であるかどうかをチェックします。固定電話番号の形式に当てはまらない場合にエラー。	custum.validation.IsTelNumber.message	固定電話番号が不正です。
@IsTelPhone	プロパティ (文字列)	携帯電話番号であるかどうかをチェックします。携帯電話番号の形式に当てはまらない場合にエラー。	custum.validation.IsTelPhone.message	携帯電話番号が不正です。
@IsPost	プロパティ (文字列)	郵便番号であるかどうかをチェックします。郵便番号の形式に当てはまらない場合にエラー。	custum.validation.IsPost.message	郵便番号は３桁と-４桁の数値で入力して下さい


custum.validation.IsNumber.message	半角数字のみで入力して下さい。
custum.validation.IsZenkaku.message	全角のみで入力して下さい。
custum.validation.IsZenkakuKana.message	全角カタカナのみで入力して下さい。
custum.validation.IsHankaku.message	半角のみで入力して下さい。
custum.validation.IsHankakuEisu.message	半角英数のみで入力して下さい。
custum.validation.IsHankakuEisuKigo.message	半角英文字数字記号のみ入力して下さい。
custum.validation.IsDate.message	正しい日付で入力して下さい。
custum.validation.IsTelAll.message	電話番号が不正です。
custum.validation.IsTelNumber.message	固定電話番号が不正です。
custum.validation.IsTelPhone.message	携帯電話番号が不正です。
custum.validation.IsPost.message	郵便番号は３桁と-４桁の数値で入力して下さい



javax.validation.constraints.AssertFalse.message=False\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
javax.validation.constraints.AssertTrue.message=True\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
javax.validation.constraints.DecimalMax.message={value}\u4EE5\u4E0B\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
javax.validation.constraints.DecimalMin.message={value}\u4EE5\u4E0A\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
javax.validation.constraints.Digits.message=\u5883\u754C\u4EE5\u5916\u306E\u6570\u5024\uFF08\u4E88\u6E2C:<{integer}digits>.<{fraction}digits>\uFF09
javax.validation.constraints.Future.message=\u672A\u6765\u65E5\u4ED8\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
javax.validation.constraints.Max.message={value}\u4EE5\u4E0B\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
javax.validation.constraints.Min.message={value}\u4EE5\u4E0A\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
javax.validation.constraints.NotNull.message=Null\u306F\u8A31\u53EF\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002
javax.validation.constraints.Null.message=Null\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
javax.validation.constraints.Past.message=\u904E\u53BB\u65E5\u4ED8\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
javax.validation.constraints.Pattern.message=\u30D1\u30BF\u30FC\u30F3\uFF08{regexp}\uFF09\u306B\u4E00\u81F4\u3057\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
javax.validation.constraints.Size.message=\u30B5\u30A4\u30BA\u306F{min}\u4EE5\u4E0A{max}\u4EE5\u4E0B\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
org.hibernate.validator.constraints.CreditCardNumber.message=\u6B63\u3057\u3044\u30AF\u30EC\u30B8\u30C3\u30C8\u30AB\u30FC\u30C9\u756A\u53F7\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002
org.hibernate.validator.constraints.Email.message=\u6B63\u3057\u3044E-Mail\u306E\u5F62\u5F0F\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002
org.hibernate.validator.constraints.Length.message=\u9577\u3055\u306F{min}\u4EE5\u4E0A{max}\u4EE5\u4E0B\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
org.hibernate.validator.constraints.NotBlank.message=\u30D6\u30E9\u30F3\u30AF\u306F\u8A31\u53EF\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002
org.hibernate.validator.constraints.NotEmpty.message=\u4F55\u3089\u304B\u306E\u30C7\u30FC\u30BF\u304C\u5FC5\u8981\u3067\u3059\u3002
org.hibernate.validator.constraints.Range.message={min}\u304B\u3089{max}\u306E\u7BC4\u56F2\u5185\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
org.hibernate.validator.constraints.SafeHtml.message=\u5B89\u5168\u3067\u306F\u306A\u3044HTML\u304C\u542B\u307E\u308C\u3066\u3044\u307E\u3059\u3002
org.hibernate.validator.constraints.ScriptAssert.message={script}\u306B\u3088\u308B\u8A55\u4FA1\u304C\u4E0D\u6B63\u3067\u3059\u3002
org.hibernate.validator.constraints.URL.message=\u6B63\u3057\u3044URL\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002custum.validation.IsNumber.message=\u534A\u89D2\u6570\u5B57\u306E\u307F\u3067\u5165\u529B\u3057\u3066\u4E0B\u3055\u3044\u3002
custum.validation.IsZenkaku.message=\u5168\u89D2\u306E\u307F\u3067\u5165\u529B\u3057\u3066\u4E0B\u3055\u3044\u3002
custum.validation.IsZenkakuKana.message=\u5168\u89D2\u30AB\u30BF\u30AB\u30CA\u306E\u307F\u3067\u5165\u529B\u3057\u3066\u4E0B\u3055\u3044\u3002
custum.validation.IsHankaku.message=\u534A\u89D2\u306E\u307F\u3067\u5165\u529B\u3057\u3066\u4E0B\u3055\u3044\u3002
custum.validation.IsHankakuEisu.message=\u534A\u89D2\u82F1\u6570\u306E\u307F\u3067\u5165\u529B\u3057\u3066\u4E0B\u3055\u3044\u3002
custum.validation.IsHankakuEisuKigo.message=\u534A\u89D2\u82F1\u6587\u5B57\u6570\u5B57\u8A18\u53F7\u306E\u307F\u5165\u529B\u3057\u3066\u4E0B\u3055\u3044\u3002
custum.validation.IsDate.message=\u6B63\u3057\u3044\u65E5\u4ED8\u3067\u5165\u529B\u3057\u3066\u4E0B\u3055\u3044\u3002
custum.validation.IsTelAll.message=\u96FB\u8A71\u756A\u53F7\u304C\u4E0D\u6B63\u3067\u3059\u3002
custum.validation.IsTelNumber.message=\u56FA\u5B9A\u96FB\u8A71\u756A\u53F7\u304C\u4E0D\u6B63\u3067\u3059\u3002
custum.validation.IsTelPhone.message=\u643A\u5E2F\u96FB\u8A71\u756A\u53F7\u304C\u4E0D\u6B63\u3067\u3059\u3002
custum.validation.IsPost.message=\u90F5\u4FBF\u756A\u53F7\u306F\uFF13\u6841\u3068-\uFF14\u6841\u306E\u6570\u5024\u3067\u5165\u529B\u3057\u3066\u4E0B\u3055\u3044




javax.validation.constraints.AssertFalse.message=must be false
javax.validation.constraints.AssertTrue.message=must be true
javax.validation.constraints.DecimalMax.message=must be less than or equal to {value}
javax.validation.constraints.DecimalMin.message=must be greater than or equal to {value}
javax.validation.constraints.Digits.message=numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
javax.validation.constraints.Future.message=must be in the future
javax.validation.constraints.Max.message=must be less than or equal to {value}
javax.validation.constraints.Min.message=must be greater than or equal to {value}
javax.validation.constraints.NotNull.message=may not be null
javax.validation.constraints.Null.message=must be null
javax.validation.constraints.Past.message=must be in the past
javax.validation.constraints.Pattern.message=must match "{regexp}"
javax.validation.constraints.Size.message=size must be between {min} and {max}
org.hibernate.validator.constraints.Email.message=not a well-formed email address
org.hibernate.validator.constraints.Length.message=length must be between {min} and {max}
org.hibernate.validator.constraints.NotBlank.message=may not be empty
org.hibernate.validator.constraints.NotEmpty.message=may not be empty
org.hibernate.validator.constraints.Range.message=must be between {min} and {max}
org.hibernate.validator.constraints.URL.message=must be a valid URL
org.hibernate.validator.constraints.CreditCardNumber.message=invalid credit card number
org.hibernate.validator.constraints.ScriptAssert.message=script expression "{script}" didn't evaluate to true
myKeys.NotNullAndSize10=Null or Size 10 over
custum.validation.IsNumber.message=
custum.validation.IsZenkaku.message=
custum.validation.IsZenkakuKana.message=
custum.validation.IsHankaku.message=
custum.validation.IsHankakuEisu.message=
custum.validation.IsHankakuEisuKigo.message=
custum.validation.IsDate.message=
custum.validation.IsTelAll.message=
custum.validation.IsTelNumber.message=
custum.validation.IsTelPhone.message=
custum.validation.IsPost.message=



