		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.1.3.Final</version>
		</dependency>
  
		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>javax.el-api</artifactId>
			<version>2.2.4</version>
		</dependency>

		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.1.0.Final</version>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>javax.el</artifactId>
			<version>2.2.4</version>
		</dependency>



package jp.co.softbank.salesscm.common.validation.anotation;

import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
import static java.lang.annotation.ElementType.CONSTRUCTOR;
import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.ElementType.PARAMETER;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.validation.Constraint;
import javax.validation.Payload;
import javax.validation.constraints.Max;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = {})
@NotNull(message = "{myKeys.NotNull}") // 独自メッセージ定義
@Size(max=10)
public @interface NotNullAndSize10 {
    String message() default "{org.yamkazu.jsr303_samples.customvalidator.UserId.message}";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
    @Retention(RUNTIME)
    @Documented
    @interface List {
        NotNullAndSize10[] value();
    }
}


package jp.co.softbank.salesscm.common.validation.anotation;

import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
import static java.lang.annotation.ElementType.CONSTRUCTOR;
import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.ElementType.PARAMETER;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.validation.Constraint;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import javax.validation.Payload;

import jp.co.softbank.salesscm.common.validation.anotation.UserId.UserIdValidator;

@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
@Retention(RUNTIME)
@Documented
@Constraint(validatedBy = { UserIdValidator.class })
public @interface UserId {
	Class<?>[] groups() default {};

	String message() default "{custum.validation.message.userid}";

	Class<? extends Payload>[] payload() default {};

	@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
	@Retention(RUNTIME)
	@Documented
	@interface List {
		UserId[] value();
	}

	class UserIdValidator implements ConstraintValidator<UserId, String> {

		@Override
		public void initialize(UserId userId) {
		}

		@Override
		public boolean isValid(String id, ConstraintValidatorContext context) {
			if (id != null && id.startsWith("A")) {
				return true;
			}
			return false;
		}
	}
}


        MaxAndMin bean = new MaxAndMin();
        bean.setStringValue("ストリング文字列です。"); 
        bean.setIntValue(-9); // -10より大きいからOK
        bean.setBigDecimalValue(new BigDecimal("3.5")); // 範囲内だからOK

        Set<ConstraintViolation<MaxAndMin>> violations = SCMValidator.validate(bean);

		if(violations.size() > 0){
			for (ConstraintViolation<MaxAndMin> violation : violations) {
				System.out.println(violation.getMessage()); //多言語化した後の実メッセージ
//				System.out.println(violation.geltMessageTemplate()); // メッセージのキー（プロパティファイルに当てるときの値）
//				System.out.println(violation.getInvalidValue()); // 実際に、画面でユーザが入れた都下の値
//				System.out.println(violation.getPropertyPath()); // DTOとかのjavaのフィールド名
			}
		}
        assertThat(SCMValidator.validate(bean).size(), is(1));




package jp.co.softbank.salesscm;

import javax.validation.constraints.Size;


public class HogeBean {
    @Size(max=10)
    String stringValue;
    
    public String getStringValue() {
		return stringValue;
	}
	public void setStringValue(String stringValue) {
		this.stringValue = stringValue;
	}
}



@IsNumber	プロパティ (文字列)	数値のみであるかどうかをチェックします。0～9以外の文字列が使用されている場合にエラー。	custum.validation.IsNumber.message	半角数字のみで入力して下さい。
@IsZenkaku	プロパティ (文字列)	全角のみであるかどうかをチェックします。全角以外の文字列が使用されている場合にエラー。	custum.validation.IsZenkaku.message	全角のみで入力して下さい。
@IsZenkakuKana	プロパティ (文字列)	全角カナのみであるかどうかをチェックします。全角カナ以外の文字列が使用されている場合にエラー。	custum.validation.IsZenkakuKana.message	全角カタカナのみで入力して下さい。
@IsHankaku	プロパティ (文字列)	半角のみであるかどうかをチェックします。半角以外の文字列が使用されている場合にエラー。	custum.validation.IsHankaku.message	半角のみで入力して下さい。
@IsHankakuEisu	プロパティ (文字列)	半角英数のみであるかどうかをチェックします。半角英数以外の文字列が使用されている場合にエラー。	custum.validation.IsHankakuEisu.message	半角英数のみで入力して下さい。
@IsHankakuEisuKigo	プロパティ (文字列)	半角英数記号のみであるかどうかをチェックします。半角英数記号以外の文字列が使用されている場合にエラー。	custum.validation.IsHankakuEisuKigo.message	半角英文字数字記号のみ入力して下さい。
@IsDate	プロパティ (文字列)	日付であるかどうかをチェックします。日付が妥当でない場合にエラー。	custum.validation.IsDate.message	正しい日付で入力して下さい。
@IsTelAll	プロパティ (文字列)	電話番号(全般)であるかどうかをチェックします。電話番号(全般)の形式に当てはまらない場合にエラー。	custum.validation.IsTelAll.message	電話番号が不正です。
@IsTelNumber	プロパティ (文字列)	固定電話番号であるかどうかをチェックします。固定電話番号の形式に当てはまらない場合にエラー。	custum.validation.IsTelNumber.message	固定電話番号が不正です。
@IsTelPhone	プロパティ (文字列)	携帯電話番号であるかどうかをチェックします。携帯電話番号の形式に当てはまらない場合にエラー。	custum.validation.IsTelPhone.message	携帯電話番号が不正です。
@IsPost	プロパティ (文字列)	郵便番号であるかどうかをチェックします。郵便番号の形式に当てはまらない場合にエラー。	custum.validation.IsPost.message	郵便番号は３桁と-４桁の数値で入力して下さい


custum.validation.IsNumber.message	半角数字のみで入力して下さい。
custum.validation.IsZenkaku.message	全角のみで入力して下さい。
custum.validation.IsZenkakuKana.message	全角カタカナのみで入力して下さい。
custum.validation.IsHankaku.message	半角のみで入力して下さい。
custum.validation.IsHankakuEisu.message	半角英数のみで入力して下さい。
custum.validation.IsHankakuEisuKigo.message	半角英文字数字記号のみ入力して下さい。
custum.validation.IsDate.message	正しい日付で入力して下さい。
custum.validation.IsTelAll.message	電話番号が不正です。
custum.validation.IsTelNumber.message	固定電話番号が不正です。
custum.validation.IsTelPhone.message	携帯電話番号が不正です。
custum.validation.IsPost.message	郵便番号は３桁と-４桁の数値で入力して下さい
